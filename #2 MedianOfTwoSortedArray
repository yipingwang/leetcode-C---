class Solution {
public:
    //int findMedian(int A[],int m, int B[], int n, int k);
    
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
       if ((m+n)%2==1){
           
           return findMedian(A,m,B,n,(m+n)/2+1);
       }
       else{
          return (findMedian(A,m,B,n, (m+n)/2) + findMedian(A,m,B,n,(m+n)/2+1))/2.0;
        }
    }
    int findMedian(int A[], int m, int B[], int n, int k){
        assert(A&&B);
        if (m<=0) return B[k-1];
        if (n<=0) return A[k-1];
        if (k<=1) return min(A[0],B[0]);
        
        // complicated cases
        if (B[n/2] >= A[m/2]){
            if ((m/2+1+n/2)>=k){
                return findMedian(A,m,B,n/2,k);
            }
            else{
                return findMedian(A + m/2 + 1, m - (m/2 + 1), B, n, k - (m/2 + 1)); 
            }
            
        }
        else {
               if ((m/2 + 1 + n/2) >= k)  
                return findMedian(A,m/2,B,n,k);
               else
                return findMedian(A,m, B+n/2+1, n-(n/2+1),k-(n/2+1));
        }
        
    }
    
};
